import java.util.function.Predicate

/*
 * Copyright Â© 2017-2024  Kynetics  LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.kotlin.android'

android {
    compileSdk 31
    defaultConfig {
        applicationId "com.kynetics.uf.clientexample"
        minSdkVersion 24
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 31
        versionCode 10601
        versionName versionFromGit(project)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    dataBinding {
        enabled = true
    }

    buildFeatures {
        viewBinding true
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    def KyneticsKeystorePass = System.getenv("KYNETICS_KEYSTORE_PASS")
    def KyneticsKeyAlias = System.getenv("KYNETICS_KEY_ALIAS")
    def KyneticsKeyPass = System.getenv("KYNETICS_KEY_PASS")

    def envs= [KyneticsKeystorePass, KyneticsKeyAlias, KyneticsKeyPass]
    def signWithKyneticsKey = envs.stream().allMatch(new Predicate<String>() {
            @Override
            boolean test(String s) {
                return s != null && !s.isEmpty()
            }
        })

    signingConfigs{
        if (signWithKyneticsKey) {
            kynetics {
                storePassword System.getenv("KYNETICS_KEYSTORE_PASS")
                keyAlias System.getenv("KYNETICS_KEY_ALIAS")
                keyPassword System.getenv("KYNETICS_KEY_PASS")
                storeFile file('../keystore/kynetics.jks')
                v2SigningEnabled true
                v1SigningEnabled true
            }
        }
    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        if (signWithKyneticsKey) {
            kynetics_key {
                signingConfig signingConfigs.kynetics
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                matchingFallbacks = ['release', 'debug']
            }
        }
        debug{
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach {
            outputFileName = new File("uf-service-api-reference-implementation-${versionFromGit(project)}-${variant.buildType.name}.apk")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "com.google.android.material:material:1.0.0"

    implementation "androidx.appcompat:appcompat:1.3.0"
    implementation "androidx.preference:preference:1.1.0"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.recyclerview:recyclerview:1.0.0"
    implementation "androidx.cardview:cardview:1.0.0"
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2"
    implementation 'com.github.kynetics.uf-android-client:uf-client-service-api:v1.6.1'
}
